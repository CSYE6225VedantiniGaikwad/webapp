name: Git Workflows

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Packer-Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Connect to PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql db: 'postgres'
          postgresql user: 'postgres'
          postgresql password: 'test@123'
      - name: Build with Maven
        working-directory: demo
        run: mvn clean install
      - name: Running test cases
        working-directory: demo
        run: mvn test -Dtest=HealthCheckTests
      - name: Building Jar file
        working-directory: demo
        run: mvn package -Dmaven.test.skip=true
      - name: Checking AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Installing packer provisioners
        working-directory: packer_tmp
        run: packer init aws-debian.pkr.hcl
      - name: Building Packer
        working-directory: packer_tmp
        run: packer build aws-debian.pkr.hcl
  refresh-instances:
    name: Refreshing Instances
    runs-on: ubuntu-latest
    needs: build
    env:
      EC2_LAUNCH_TEMPLATE: ${{ vars.EC2_LAUNCH_TEMPLATE }}
      EC2_AUTOSCALING_GROUP: ${{ vars.EC2_AUTOSCALING_GROUP }}
    steps:
      - name: Checking AWS Demo credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: get the latest AMI id
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --filters "Name=name,Values=csye6225*" \
            --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
            --output text)
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      - name: print env variables
        run: |
          echo "EC2_LAUNCH_TEMPLATE: $EC2_LAUNCH_TEMPLATE"
          echo "EC2_AUTOSCALING_GROUP: $EC2_AUTOSCALING_GROUP"
          echo "AMI_ID: $AMI_ID"
      - name: Create new launch template version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id $EC2_LAUNCH_TEMPLATE \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
      - name: Refresh Instances
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $EC2_AUTOSCALING_GROUP
      - name: wait on instance refresh completion
        run: |
          asg_name="<your-auto-scaling-group-name>"
          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.EC2_AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
              if [ "$refresh_status" == "Successful" ]; then
                echo "Instance refresh completed successfully."
                break
              elif [ "$refresh_status" == "Failed" ]; then
                echo "Instance refresh failed."
                exit 1
              elif [ "$refresh_status" == "Cancelled" ]; then
                echo "Instance refresh cancelled."
                exit 1
              else
                echo "Instance refresh in progress..."
                sleep 30
              fi
          done